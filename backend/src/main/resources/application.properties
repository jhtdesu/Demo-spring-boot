spring.application.name=demo

# Google OAuth2 Configuration
spring.security.oauth2.client.registration.google.client-id=451497737622-2uv26cj70lmrjjrqr2bqgubr4oef5lo3.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=email,profile
spring.security.oauth2.client.registration.google.redirect-uri=https://backend-jh-cff06dd28ef7.herokuapp.com/login/oauth2/code/google
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# MongoDB Configuration
spring.data.mongodb.uri=mongodb+srv://jhtdesu:123@cluster0.whkwex2.mongodb.net/test

# Logging Configuration
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web.cors=TRACE
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.com.example.demo=DEBUG
logging.level.com.example.demo.security=TRACE

# Thymeleaf Configuration
spring.thymeleaf.enabled=true
spring.thymeleaf.mode=HTML
spring.thymeleaf.suffix=.html
spring.thymeleaf.prefix=classpath:/templates/

# Server Configuration
server.port=${PORT:8080}

# Cookie Configuration
server.servlet.session.cookie.same-site=None
server.servlet.session.cookie.secure=true
server.servlet.session.cookie.http-only=true

# CORS Configuration
spring.web.cors.allowed-origins=https://frontend-jh-74d9be1b01e4.herokuapp.com
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true
spring.web.cors.max-age=3600